// extern crate criterion;
extern crate wavelet_matrix;

use criterion::Criterion;
use wavelet_matrix::WaveletMatrix;

fn fibonacci(n: u64) -> u64 {
    match n {
        0 => 1,
        1 => 1,
        n => fibonacci(n - 1) + fibonacci(n - 2),
    }
}

// #[test]
// fn criterion_benchmark() {
//     Criterion::default().bench_function("fib 20", |b| b.iter(|| fibonacci(20)));
// }

#[test]
fn criterion_benchmark() {
    // let vec0 = Vec::new();
    Criterion::default().bench_function_over_inputs(
        "new()",
        |b, &&size| {
            // let vec: Vec<u64> = Vec::new();
            let vec: Vec<u64> = std::iter::repeat(0u64).take(size).collect::<Vec<_>>();
            b.iter(|| WaveletMatrix::new(&vec))
        },
        &[0, 1000, 1000000],
    );
}
